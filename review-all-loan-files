#!/usr/bin/env ruby

require_relative "boot"

use_abc = true
# use_abc = false

llm_model = nil

commands = [
  :approve_loan_file,
  :deny_loan_file,
  :find_a_loan_file_that_needs_review,
  :start_underwriter_review,
  :review_loan_file,
  :review_all_loan_files
]

command_to_path_prefix = if use_abc
                           commands.to_h { |command| [command, :agent_backed_commands] }
                         else
                           commands.to_h { |command| [command, nil] }
                         end

command_to_path_prefix = {
  approve_loan_file: nil,
  deny_loan_file: nil,
  find_a_loan_file_that_needs_review: :agent_backed_commands,
  start_underwriter_review: nil,
  review_loan_file: nil,
  review_all_loan_files: nil
}

command_to_path_prefix.each_pair do |command, path_prefix|
  require_relative ["loan-origination", *path_prefix, command].join("/")
end

# llm_model = "qwen3:32b"
# llm_model = "qwen3:30b"
# llm_model = "qwen3:14b" # works
# llm_model = "qwen3:8b"
# llm_model = "qwen3:4b"
# llm_model = "qwen3:1.7b"
# llm_model = "qwen3:0.6b"
llm_model = "claude-3-7-sonnet-20250219"
# llm_model = "claude-sonnet-4-20250514"
# llm_model = "claude-opus-4-20250514"
# llm_model = "gpt-4o"
# llm_model = "o1"
#
FoobaraDemo::LoanOrigination.foobara_command_classes.each do |command_class|
  if command_class < Foobara::AgentBackedCommand
    command_class.verbose
    command_class.llm_model(llm_model)
  end
end

outcome = FoobaraDemo::LoanOrigination::ReviewAllLoanFiles.run

if outcome.success?
  puts
  outcome.result.each do |name_and_decision|
    name, decision = name_and_decision.values_at(:applicant_name, :decision)

    if decision.denied?
      puts "Denied: #{name}"
      puts "Reason: #{decision.denied_reasons.join(", ")}"
    else
      puts "Approved: #{name}"
    end
    puts
  end
else
  puts outcome.errors_hash
end
